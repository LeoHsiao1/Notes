::: v-pre


 
多线程
- C语言的线程库。
- 在Linux系统上，可使用pthread.h的API创建线程。比如pthread_create()。
  - pthread.h符合POSIX标准，适用于类Unix系统。也有兼容Windows的版本——pthreads-w32。
  - 编译时要链接pthread库，比如：gcc test.c -o test -l pthread
- 在Windows系统上，可使用windows.h的API创建线程。比如CreateProcess()。
- C11制定了一个标准的线程库threads.h，但部分编译器不支持它。
##
##
##
 
<pthread.h>
- pthread.h的常用函数。（API列表：https://www.sourceware.org/pthreads-win32/manual/index.html）
- pthread_t                // 一种数据类型，用于存储线程ID
- pthread_attr_t            // 一种数据类型，用于存储线程属性
- int pthread_create(pthread_t *id,                // 传入一个pthread_t类型的变量的地址
const pthread_attr_t * attr,    // 传入线程的属性（传入NULL则是默认属性）
void *(*) (void *),            // 传入要运行的函数名
void *arg);        // 传入要运行的函数的参数（没有参数则填NULL，有多个则封装成一个结构体）
  - 功能：创建一个线程来运行一个函数。
  - 线程创建成功后会将该线程的ID存储到变量id中，并返回0。线程创建失败时会返回非零值。
  - 要运行的函数应该定义成 void *fun(void *arg) 的格式。
- void pthread_exit(void *retval);
  - 功能：终止当前线程。retval用于存储当前线程的返回值，可在其它线程中查看该变量的值。
  - 当一个线程的代码运行结束时，该线程就会自动终止。也可以调用一些函数来主动结束线程。
- int pthread_cancel(pthread_t id);
  - 功能：向某个线程发送取消请求。
  - 目标线程可能立即终止，也可能稍后终止，也可能忽略取消请求。
- int pthread_join(pthread_t id, void **retval);
  - 功能：暂停当前线程的运行，等待id所指的线程终止。当它终止之后，其返回值会存储在retval变量中。
-
- 例：
#include <stdio.h>
#include <pthread.h>

void *fun1(){
    puts("fun1() end.");
    return 0;
}

typedef struct{
    int age;
    char name[10];
} Horse;

void *fun2(void *p){
    Horse h = *(Horse *)p;
    printf("age: %d, name: %s.\n", h.age, h.name);
    puts("fun2() end.");
    return 0;
}

int main(){
    int rc;
    pthread_t id;

    // 创建第一个线程
    rc = pthread_create(&id, NULL, fun1, NULL);
    if (rc)
        puts("Failed to create the thread fun1().");

    // 创建第二个线程
    Horse horse = {5, "Jack"};
    rc = pthread_create(&id, NULL, fun2, &horse);
    if (rc)
        puts("Failed to create the thread fun2().");

    // 阻塞主线程的运行，以免提前终止子线程
    pthread_join(id, NULL);
    puts("main() end.");
    return 0;
}
##
##
##
 
:::