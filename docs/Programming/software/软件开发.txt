软件开发
## 编程要有计划，清楚自己的进度。一般分为以下五步：
- 分析需求
  - 要实现什么功能、达到什么效果。
- 分析流程
  - 分析程序的运行流程、逻辑、框架。
- 分离模块
  - 实现常见的功能时先去网上找找有没有现成的，避免重复造轮子。首先理解其用法，其次理解其思路。
  - 不要随便重构代码，这要花费很大代价，除非实在不能向下兼容。
- 编写代码
  - 先想象出代码是什么样子，再把它编写出来。
  - 假设异常总是可能出现，考虑好怎么处理各个环节的异常。
  - 埋头苦干一段时间之后就放松一下，检查进度、宏观规划。
  - 做好规划，不要做无用功，不要重复劳动，不要做错方向。
  - 先规划，再行动；继续规划，继续行动。
  - 软件的性能、可维护性、用户体验、稳定性、安全性需要均衡考虑，比如银行系统最看重安全性。
  - 开发软件时，避免过早优化。因为功能代码稳定之前，需求可能变化，导致优化的效果不会持续。而且此时满足功能需求，比优化性能的性价比更高。
- 测试验证
  - 编程时尽量多调试，改动大一点或超过一段时间就调试一次。
  - 应该经常试用自己做的产品，在实际应用中发现其不足。
## 防错方法。
- 将一个复合功能分解成多个基础模块，便于单独修改和单元调试。
  - 一个独立的模块被调用时应该不信任外部的输入，先判断输入是否合法。外部调用该模块时应该不信任它的输出，先判断返回值是否合法。
  - 给每块代码插入一些排错语句有利于调试排错，但是会使得代码变得臃肿、增加程序运行时的开销。
  - 折中的方法是，在程序开发测试阶段多插入一些排错语句，然后逐步确保这些环节不会有错、删除排错语句，让程序相信自己内部的数据，只是严格审查外部输入。
- 排查程序错误时，首先保证能重现错误，然后估计可能出错的代码，逐步排查，缩小嫌疑范围。
  - 可以经常使用断言来检测程序某些环节的变量是否合法。
- 及时处理每个异常可以避免打断程序的运行，但也可能导致忽略重要的异常。
- 在C语言中调用API时，先确定哪个API会创建内存、这块内存又要用哪个API释放。
## 软件的版本号。
- 主版本号.子版本号[.修订版本号[.编译版本号]]
  - 当不再兼容某些旧API时，将主版本号递增（同时将之后的版本号复位为0）。
  - 当修改了API但依然兼容所有旧API时，将子版本号递增。
  - 当修改了某些代码但没有修改API时，将修订版本号递增。
  - 编译版本号表示对同一代码做的不同编译，通常用于在不同平台上发布。
- 几种软件版本名。
  - α（alpha）    ：只是一个初步完成品，通常有很多bug，只用于内部测试，不对外发布。
  - β（beta）    ：消除了严重错误，可以提供给部分用户试用，即公开测试。
  - RC(Release Candidate)    ：候选发布版，如果没有问题就成为release版本。软件在正式发布前可能有多个RC版本。
  - release        ：正式发布的版本，可以提供给所有用户使用。
  - standard        ：标准版，提供了软件的基本功能，满足一般用户的需求。
  - professional    ：专业版，包含一些标准版没有的高级功能，满足专业用户的需求。
  - enterprise    ：企业版，用户可以使用该软件的所有功能。
## 软件开发模式。
- 瀑布开发：严格按照分析需求、设计规划、开发、集成、测试的步骤开发软件，完成上一阶段之后再专心执行下一阶段。
  - 发布周期长，当需求变化时难以做出调整。
- 迭代开发：通常每几周迭代一次，每次只设计和实现软件的一部分功能，提交给客户之后再根据新的需求进行下一次开发。
  - 发布周期短，能适应需求的变化。
- 螺旋开发：结合瀑布开发和迭代开发，先实现软件的重要功能，然后评估风险，确保软件变得稳定之后再实现其它功能，逐渐展开。
  - 有利于抵抗风险。
- 敏捷开发：以需求为核心，一边发布软件的新版本，一边进行开发迭代。
  - 发布周期短，开发、测试效率高，能更好地适应需求的变化。

## 在需求已确定的情况下，软件的开发流程大致分为：开发、构建、单元测试、集成、集成测试、交付、部署。
  - 集成一般是指将新代码加入 Git 仓库的主分支。
  - 这里的交付不是指交付给客户，而是指发版（release），即发布项目的新版本。
- 持续集成（Continuous Integration，CI）：快速完成从开发到集成的周期。
  - 传统模式没有持续集成，开发人员们通常在不同的 Git 开发分支上提交代码，等开发完成之后才手动合并到主分支，并进行集成测试。而持续集成是每开发一个新功能就尝试集成、测试，能更早看到效果、发现问题，也能避免开发分支与主分支的差异过大。
  - 目前流行的 CI 方案：开发人员将源代码推送到 GitLab ，自动触发 Jenkins 脚本去构建、自动化测试，如果测试通过则合并到 Git 仓库的主分支。
- 持续交付（Continuous Delivery，CD）：快速完成从开发到交付的周期。
  - 目前流行的方案：从 GitLab 拉取源代码，构建 Docker 镜像，上传到 Harbor 仓库。
- 持续部署（Continuous Deployment，CD）：快速完成从开发到部署的周期。
  - 目前流行的方案：在持续交付之后，从 Harbor 仓库拉取镜像，部署到 k8s 中。
