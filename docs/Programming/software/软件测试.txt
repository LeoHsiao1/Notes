软件测试
## 测试步骤。
- 熟悉项目
- 分析需求
  - 分析需求后才能清楚测试目标，提高测试的覆盖率。
- 编写测试计划
  - 测试应该有计划地进行。
  - 测试计划不能一劳永逸，不可能测试出完美的软件，也不能停止测试。
- 编写测试用例
  - 编写测试用例是为了方便以后的重复测试，因此不应该对需求多变的功能编写测试用例。
  - 不要害怕遇到bug，bug早晚会出现，一定会出现，越早解决越好。
  - 测试用例要尽量简单，尽量只测试一种功能，便于排查。
  - 先测一下错误的情况，证明测试用例可以发现错误。
  - 常见的测试用例：某种对象的增删查改以及使用、某种信息的查看和设置、某种输入的多种可能……
- 准备测试环境
- 开始测试
  - 测试时先故意让软件出错，证明该测试方法可以发现错误。
  - 测试应该以用户需求为核心，测试的目的是为了提高用户的使用体验，而不是找出多少bug。
- 输出测试报告
  - 描述测试环境、bug的复现步骤
## 根据测试目标进行分类。
- 功能测试：基于黑盒测试。比如软件能否成功运行、能否实现应有的功能、是否与预期状态一致、抓包是否正常。
  - 冒烟测试：检查软件能否达成一些基本要求，这是进行其它测试的前提。适合做成自动化测试。
先测试软件能否在简单情况下跑通，再测试软件能否在复杂情况下跑通。
  - 异常测试：软件的容错性如何、运行出错时怎么定位错误，比如是否会输出日志。
- 性能测试：测试影响用户体验的性能，比如软件或服务器的响应速度、对系统资源的消耗量。
  - 负载测试（load testing）：测试几种不同负载情况下，软件的运行状态。比如一百个连接数、一千个连接数有什么区别。
  - 压力测试（stress testing）：逐渐增加负载压力，找到软件的最大承受能力。从而确定软件的能力上限。
  - 极限测试：加到最大负载压力，测试软件在极限情况下能坚持多久。从而确定软件有多少能力可以透支。
  - 容量测试：通过测试找到软件的最大容量。比如数据库的最大存储量。
  - 稳定性测试：测试在某种程度的负载压力下，软件长时间运行的稳定性。比如连续运行时tps能保持稳定。
  - 高可用性：测试软件能否长时间运行，一直提供可靠服务。
- 兼容性测试：测试对不同平台的兼容性、不同平台之间能否正常通信。
- 安全性测试：测试软件对用户访问权限的控制、对数据的保护等方面。
  - SQL注入测试
## 软件测试的其它分类。
- 根据能否自动测试分为：
  - 手动测试
  - 自动测试：主要用于一些经常重复执行的测试用例。
- 根据是否运行程序分为：
  - 静态测试：不运行程序，检查源代码、说明文档等内容。
  - 动态测试：运行程序，检查程序的运行状态。
- 根据是否了解源代码分为：
  - 白盒测试：阅读源代码，理解软件的运行逻辑，找出软件内部的问题。
  - 黑盒测试：不阅读源代码，分析程序的外部特征。
  - 灰盒测试：综合使用白盒测试和黑盒测试。
- 根据软件的开发阶段分为：
  - 单元测试：测试软件中的一个模块。
  - 集成测试：将单个模块集成到软件中，看能否组装在一起。
  - 系统测试：测试整个软件系统，一般在生产环境中运行。
  - 验收测试：由用户测试验收。
  - 回归测试：旧代码被修改后要重新测试，检查软件是否照常。
## 测试用例的设计方法。
- 等价类划分法：将软件的输入值分成多个集合，每个集合选出一个代表来输入。
  - 比如测试布尔值时，True、False属于有效等价类，除此之外的数字、字符串等集合都是无效等价类。可以取一个数字、一个字符串来测试输入，也可以考虑更详细的情况，比如数字0和1、数字混合字符串等、特殊字符。
- 边界值分析法：已知软件输入值的有效范围时，测试输入这个范围的边界值，看它是否正常。
  - 比如一年里，1月和12月是边界值，软件可能没有正确处理边界值。
- 错误推测法：已知软件可能出错的情况时，故意测试这些情况下软件的运行状态。
- 流程分析法：验证软件的运行流程是否符合预期，比如正常运行流程、出现异常时的处理流程。
- 评定表法：已知软件的判断逻辑时，将所有判断逻辑整理成一个评定表，然后依次测试软件能否实现这些判断逻辑。
  - 比如当输入为数字时软件应该怎么做，当输入为字符串时软件应该怎么做。
- 正交分析法：将影响软件运行的各个输入变量、环境变量整理成表（尽量是互不相干的变量），就得到了大量变量组合，分析每个变量组合对软件的影响。这样测试的覆盖率高。
- 模糊测试：测试各种意外的情况、随机的输入，看能否发现漏洞。
## bug的严重程度。
- 致命错误    ：不能实现重要功能、有重大隐患，必须立即处理。
- 严重错误    ：没有实现次要功能、性能较差。
- 一般错误    ：一些不太重要的问题、某些方面的缺陷，允许延后处理。
- 不重要    ：通常为说明文档的描述错误。
- 建议        ：一些优化的建议。
## 相关概念。
- 测试覆盖率：表示测试用例的有效性。
  - 可分为：覆盖了多少条语句（即执行了它们）、覆盖了多少种可能的输入、覆盖了多少种可能的运行情况。
  - 一味地追求测试覆盖率会增加测试成本，可以适当地关注没被测试覆盖的地方。


## 测试方式

- AB 测试：制定两种方案，根据执行效果判断哪个方案更好。
  - 比如 Web 网站发布两种 UI ，分别给两组用户使用。

- Mock 测试：当测试对象不容易获得时，仿制一个假对象来进行测试。
  - 例如测试一个创建用户的 API 时，输入一些假人名、电话的数据。
