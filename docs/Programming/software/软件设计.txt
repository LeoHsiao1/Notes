
设计模式
## 设计模式的根本目的是解耦、提高效率。
## Python作为动态语言，其设计模式的实现方法与Java等静态语言不同。有些设计模式Python用自身的语法就可以实现。
##
## 面向对象编程（Object Oriented Programming，OOP）
##
##
- 模块化设计：把可以独立实现的功能分离成一个个模块。
  - 高内聚：将每个功能需要用到的代码都封装到模块中，使模块内部尽量不依赖外部。
  - 低耦合）：让模块与外部的各种联系尽可能地少。
- 单一职责原则    ：每个模块只做它应该做的事，少管闲事，且能独立地把自己的事做好。
- 开闭原则        ：每个模块对扩展开放、对修改关闭。
- 依赖抽象原则    ：每个模块依赖于外部的抽象接口，而不是具体细节。
- 组合优于继承    ：如果两个类之间是is a的关系，应该用继承进行管理，否则使用组合更好。
  - 组合和继承都能实现对象的多态性、提高代码的复用性，但组合能避免类之间的耦合。
  - 继承会加深父类与子类的耦合，破坏子类和父类的封装（导致它们的成员混合在一起）。
## 测试驱动的开发：先规划开发需求、编写测试用例，再开始开发代码。
##
- 发布/订阅（publish/subscribe）模式：消息的发布者（Publisher）会把消息发送到代理（Broker），由代理接受订阅者（Subscriber）的订阅请求并发布消息。
  - Publisher可以同时是Subscriber。
  - 代理可以是一台设备或一个应用程序。
  - 从客户端/服务器模式来看，Publisher和Subscriber都是客户端（Client），Broker则是服务器（Server）。
- 观察者模式与发布/订阅模式很像，但是被观察对象会直接将消息推送给各个观察者，不存在代理。
##
##
## MVC模式：
Model（模型）：负责读写数据库
View（视图）：负责从Model读取数据，显示给用户
Controller（控制器）：从View读取用户的输入信息，向Model发送数据。

软件架构没有银弹，往往是取舍。