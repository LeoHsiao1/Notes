::: v-pre

♢ restframework
## restframework：Python的第三方库，是Django的插件，用于更好地实现Django的Restful API。
- 特点。
  - 让Django通过Restful API与前端通信，返回JSON格式的数据。
  - 提供了调试用的API网页，可以发出OPTIONS、GET、POST等请求。
  - 提供了将Model序列化、反序列化的方法。
## 用法示例。
1.    安装模块：pip install djangorestframework
2.    在settings.py的INSTALLED_APPS中加入'rest_framework'。
3.    在app目录下的models.py文件中定义数据表：
from django.db import models

class Student(models.Model):
    name = models.CharField(max_length=32, default='')
    add_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name
4.    在app目录下创建一个serializers.py文件，用于定义序列化器。
from .models import Student
from rest_framework import serializers

class StudentSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Student
        fields = ('name', 'add_date')
)
5.    在app目录下的views.py文件中加入如下内容，显示默认的API页面。
from .models import Student
from .serializers import StudentSerializer
from rest_framework import viewsets

class StudentViewSet(viewsets.ModelViewSet):
    queryset = Student.objects.all().order_by('add_date')        # 重载ModelViewSet的两个属性
    serializer_class = StudentSerializer
6.    最后，在urls.py文件中注册URL路径，如下。
from django.urls import path, include
from rest_framework import routers
from .views import StudentViewSet

router = routers.DefaultRouter()
router.register(r'students', StudentViewSet)    # 用routers路由器注册viewsets

urlpatterns = [path(r'', include(router.urls))
                ]
7.    启动测试服务器之后，访问 127.0.0.1/students/ 即可看到对应的API页面。
## 定义视图函数的示例。
from rest_framework.decorators import api_view

@api_view(['GET','POST'])
def test(request, format=None):
    if request.method == "GET":
        ...
    if request.method == "POST":
        ...

## 定义视图类的示例。
from django.shortcuts import get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import Student
from .serializers import StudentSerializer

class StudentView(APIView):
    def get(self, request, format=None):
        students = Student.objects.all()
        # 创建序列化器，将多个Model实例序列化成JSON文本（默认many=False，用于序列化一个实例）
        serializer = StudentSerializer(students, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        serializer = StudentSerializer(data=request.data)   # 创建序列化器，将JSON文本反序列化
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)

    def put(self, request, pk, format=None):
        student = get_object_or_404(Student, pk)
        serializer = StudentSerializer(student, data=request.data)  # 反序列化并更新实例
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=400)

    def delete(self, request, pk, format=None):
        student = get_object_or_404(Student, pk)
        student.delete()
        return Response(status=204)

- 在urls.py文件中注册该URL：
urlpatterns = [
    path('students/', views.StudentView.as_view()),
]
- 可以基于Model示例或JSON文本创建serializer序列化器，然后可以用serializer.data导出JSON文本，也可以用serializer.save()保存到数据库中。
- restframework修改了request对象，可通过request.data获取请求报文的body（dict类型）。
- restframework提供了更灵活的Response()函数，直接请求127.0.0.1/students/会返回JSON格式的报文body，而请求127.0.0.1/students/?format=api时会返回HTML格式的报文body，用于显示API页面。
## 可在settings.py中加入如下字典，用于保存restframework的配置：
REST_FRAMEWORK = {
    ...
}
##
##
##
 
tests
## Django提供了django.test.TestCase类，通过继承它可以定义测试类，测试方法的名字要以test开头。如下：
from django.test import TestCase

class QuestionModelTests(TestCase):
    def test_was_published(self):
        self.assertIs(Question.was_published(), False)        # 断言某个值应该为False，否则报错
- 也可以安装pytest-django模块，用pytest执行Django项目目录下的测试用例。
- 原则上，应该对每个Model、视图都分别编写测试用例。
##
##
##
##
##
 
示例
## 登录模块。
- 需要设计的页面：login页面、register页面、logout页面、home页面。
  - 用户访问login页面即可登录。
  - 在login页面有一个register页面的链接，用户可以点击它进行注册。
  - 当用户登录之后，在一般页面上不再显示“登录”按钮，而是显示“注销”按钮。用户在注销之后会被重定向到logout页面，或者login页面。
- 下例是一个处理登录请求的view函数：
@require_http_methods(["POST"])
def login(request):
username = request.POST.get('username')        # 从POST表单中提取用户名、密码
password = request.POST.get('password')

if request.session.get("username"):            # 已登录的用户不能重复登录
    return JsonResponse({'error': 'Already logged in.'}, status=403)

user = models.User.objects.get(name=username)
if check_hash(password, user.password):        # 根据哈希值判断密码是否正确
    request.session["username"] = ...            # 将用户名保存到session中，表示该用户已登录
    return redirect("/")                        # 登录成功之后，重定向到其它页面

- 服务器每次收到用户的HTTP请求时，都要检查用户是否已登录。如果未登录，则重定向到login页面。
if not request.session.get("username"):
    return redirect("/login")
- 除了密码，还可通过OAuth、SSH密钥、API密钥等方式进行认证。
## 权限管理系统。

RBAC  是基于角色的访问控制（Role-Based Access Control ）在 RBAC  中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。
- 需要设计的数据表：User、Group、Permission
  - User与Group、User与Permission、Group与Permission都是多对多关系。
  - User的示例：
class User(models.Model):
    username = models.CharField('username', max_length=32, unique=True, validators=[username_validator])
    password = models.CharField('password', max_length=32)        # 密码要按哈希值存储
    email = models.EmailField('email address', blank=True)
    date_joined = models.DateTimeField('date joined', auto_now_add=True)

    is_superuser = models.BooleanField('is superuser', default=False)
    groups = models.ManyToManyField(Group, verbose_name='groups', blank=True)
    permissions = models.ManyToManyField(Permission, verbose_name='permissions', blank=True)

    def has_permission(self, permission, obj=None):
        if self.is_superuser:        # 如果用户是超级管理员，则拥有所有权限
            return True
        ...

- 服务器每次收到用户的HTTP请求时，都要检查用户是否对该操作有权限。如下：
if not self.has_permission(request, obj):
    return JsonResponse({'error': '403 Forbidden'}, status=403)
## CMDB（Configuration Management Database，配置管理数据库）：用于存储硬件、软件资源的信息并进行管理。
- CMDB是运维的主要工具，一般做成Web或软件，可在CMDB的基础上搭建其它管理系统。
- CMDB系统应该至少分为两层：
  - 管理层：管理实际的资源。
  - 业务层：通过UI界面与用户交互。
## DevOps平台：将DevOps流程整合到一个网站上。包含以下功能：
- 从开发到部署的流程
  - 部署的环节是容器编排
- CMDB
- 监控系统：记录日志、自动告警
- 自动运维：比如自动执行一些脚本
- 统计报表
##
##
##
##
##
##
:::