::: v-pre



### xx()

```py
xx(obj)
```
- 功能：
- 例：
  ```py
  ```









## import pyinstaller
## pyinstaller：Python的第三方库，用于将Python脚本打包成可执行文件。
- 安装：pip install pyinstaller
- 例：
pyinstaller  D:\1\1.py     # 打包成一个文件夹，包含一堆运行库
-F                # 打包成一个可执行文件，体积较大
-w                # 启动程序时只显示GUI窗口，不打开一个终端窗口（针对Windows、MacOS的选项）
-p ./utils        # 指明寻找模块的路径（如果找不到该模块的话）
--icon 1.ico        # 设置程序的图标
  - 基于64位的Python解释器打包的可执行文件不能在32位的电脑上使用，但反之可以兼容。
  - 使用-w选项的话，如果启动程序失败，就看不到报错信息了。
  - build目录下的warn-*.txt文件中记录了找不到的模块，但那些模块可能不需要导入。
- 打包之后，会在当前目录下生成两个文件夹。
  - build：保存打包过程中的一些信息。
  - dist：保存打包结果。
-
##
##
##

其它模块



## 创建子进程、子线程时，可以把它们设置成daemon，即后台运行。（此daemon不是指守护进程）
- Python创建的子进程、子线程默认是非daemon。
- 创建一个daemon之后，就不必考虑如何让它结束。
  - 当一个进程组中的所有非daemon进程结束时，系统会自动终止所有daemon线程，然后结束该进程组。
  - 当一个进程中的所有非daemon线程结束时，系统会自动终止所有daemon线程，然后结束该进程。

## 结束子线程的方法。（对子进程同理）
- 由主线程控制何时停止子线程。
  - 尽量不要强制杀死子进程，应该让它自己自愿结束，清理自己占用的资源。因为子线程可能正在执行一些不宜中断的操作，比如拿到了某个资源的锁、打开了某个文件还没有关闭、创建了孙线程还没有关闭。
  - 当主进程异常终止时（比如被kill -9），子进程就会变成没人管的孤儿进程。
- 把子线程设置成daemon，当主进程退出时它们就会被系统自动终止。
- 等子线程处理完所有业务，自然结束。
  - 这需要事先确定子线程不会无限运行。
- 让子线程自己定期判断，是否要结束运行。


## CPython早先引入了GIL（Global Interpreter Lock，全局解释锁）机制。
- 为了保证多线程之间不冲突，同一时间只有一个线程拿到GIL运行，当该线程暂时不用执行字节码时（比如等待IO响应时）就会把GIL传递给其它线程，或者隔一小段时间后解释器会抢走这个GIL给其它线程（这可能中断正在执行的某个任务，所以以防万一，还是要加锁来保证线程安全）。
- 由于GIL机制，CPython程序同时只能使用CPU的一个核。因此，处理IO密集型任务时，用多线程能提高效率；处理CPU密集型任务时，用多进程或协程才能提高效率。


## import threading
## threading：Python的标准库，用于创建多线程。
## 第一种创建线程的方法：直接调用类Thread()。
- class Thread(group=None, target=None, name=None, args=(), kwargs=None, daemon:bool)
  - 功能：定义一个线程。
  - group是线程组（目前尚未实现），target是要在线程中运行的函数，name是线程名，args是传递给线程函数的参数（必须是tuple型）。
  - 调用Thread.run()方法时，会在系统中创建该进程，分配资源，并调用Thread.start()方法开始运行。
  - 例：
>>> import threading
>>> def fun1(string):
...     print(string)
...
>>> t1 = threading.Thread(target=fun1, args=("Hello",))
>>> t1.start()        # 启动线程
Hello
  - Thread.start()方法会在系统中创建一个进程，分配资源，并调用Thread.run()方法。
  - Thread.run()方法定义了该线程的运行内容（即运行target函数）。
  - 每个线程只能调用一次start()方法，否则会报错。
- 查看线程的信息。
>>> t1.getName()        # 获得线程的名字
'Thread-1'
>>> t1.setName("t1")    # 设置线程的名字
>>> t1.isAlive()        # 判断线程是否正在运行
False
- 关于daemon线程。
>>> t1.isDaemon()                # 判断t1是否为daemon线程
>>> False
>>> t1.setDaemon(True)        # 将t1设置成daemon线程（必须在线程启动之前设置daemon属性）
RuntimeError: cannot set daemon status of active thread
- 阻塞线程。
>>> t1.join()            # 使CPU只运行该线程，阻塞其它线程的运行
>>> t1.join(3)            # 使CPU只运行该线程，最多持续3秒（t1可能提前运行结束）
- 关于多线程。
>>> threading.current_thread()        # 返回当前所在的线程对象
<_MainThread(MainThread, started 140176114464576)>
>>> threading.current_thread().getName()
'MainThread'
>>> threading.active_count()            # 返回当前运行的线程总数
2
>>> threading.enumerate()                # 列出当前运行的所有线程对象
[<_MainThread(MainThread, started 140176114464576)>, <Thread(Thread-1, started 140175977273088)>]
  - 调试运行时，会创建几个额外的线程。
  - 用 t.ident 可以获得线程的 ID 。

Python 的 threading 库没有提供杀死线程的方法，只能等线程自行退出。因此设计线程时必须让它能够自行退出。
如果不能自行退出，则只能使用 multiprocessing 库创建子进程，可以用 p.terminate() 杀死。



## 第二种创建线程的方法：继承threading.Thread类，重载其run()方法。
- 例：
>>> class myThread(threading.Thread):
...     def __init__(self, *args, **kwargs):
...         super().__init__(*args, **kwargs)    # 先调用super().__init__()进行初始化，再进行修改
...         self.name = kwargs.get("name")
...     def run(self):
...         print("Hello!")
...
>>> t1 = myThread(name="t1")
>>> t1.start()
Hello!
## 线程的锁。
- threading.Lock()：互斥锁。获得后使系统只运行当前线程，阻塞其它线程的运行。
>>> lock = threading.Lock()
>>> lock.acquire()        # 请求获得锁，这会阻塞当前线程，直到请求成功
True
>>> flag1 = True
>>> lock.release()        # 释放锁
  - 互斥锁同一时间只能被一个线程获得。
  - 死锁：线程请求获得锁时，锁一直没有释放，导致线程一直在等待。
例如：如果一个线程在获得锁之后没有释放就再调用acquire()方法，就会一直等待获得锁，陷入死锁。
- threading.RLock()：可重入锁。
  - 可重入锁可以重复获得，只不过调用了多少次acquire()就得调用多少次release()才能完全释放该锁。
>>> rlock = threading.RLock()
>>> rlock.acquire()
True
>>> rlock.acquire()
True
>>> rlock.release()
>>> rlock.release()
>>> rlock.release()
RuntimeError: cannot release un-acquired lock
## 定时任务。
- class Timer(interval, function, args=None, kwargs=None)
  - 功能：定义一个线程，在interval秒之后执行function函数。
  - 只不过是延迟启动一个线程，不适合处理大量的、频繁的定时任务。
  - 例：
>>> t = threading.Timer(3.0, print, ('hello',))
>>> t.start()        # 启动线程
>>> hello

>>> t.cancel()        # 取消该进程
##
##
##

## import queue
## queue：Python的标准库，用于创建线程间通信的队列。
- queue模块提供了三种队列，都是基于生产者-消费者模式，自身实现了线程锁，是线程安全的。
## class Queue(maxsize: int)
- 功能：创建一个先进先出队列（FIFO）。
  - maxsize表示该队列的最大容量，当maxsize<=0时容量为无限大。
- 例：
>>> from queue import Queue
>>> q = Queue(10)
>>> q.qsize()            # 返回队列此时的大小（不可靠，队列的大小可能转瞬就变）
0
>>> q.empty()            # 判断队列是否为空
True
>>> q.full()                # 判断队列是否满了
False
- Queue.put(item, block=True, timeout=None)
  - 功能：往队列中写入一个元素（可以是任意类型）。
  - 当队列满了时，写入操作会一直阻塞，直到队列中有元素被消费掉。
如果block=False，则不阻塞，直接抛出queue.Full异常。
如果输入了timeout参数，则最多阻塞timeout秒，然后抛出异常。
  - 例：
>>> q.put(0)
>>> q.put("Hello", block=False)
>>> q.put([1, 2, 3], timeout=1)
- Queue.get(block=True, timeout=None)
  - 功能：从队列中取出一个元素。
  - 当队列为空时，读取操作会一直阻塞，直到队列中写入了新元素。
如果block=False，则不阻塞，直接抛出queue.Empty异常。
如果输入了timeout参数，则最多阻塞timeout秒，然后抛出异常。
  - 例：
>>> q.get()
0
>>> q.get(block=False)
'Hello'
>>> q.get(timeout=1)
[1, 2, 3]
## class LifoQueue(maxsize=0)
- 功能：创建一个后进先出队列（LIFO）。
- LifoQueue继承自Queue类，因此可使用同样的方法进行操作。
## class PriorityQueue(maxsize: int)
- 功能：创建一个优先级队列（Priority）。
  - 基于heapq模块的heappush()和heappop()实现，只不过加上了线程锁。
- PriorityQueue也继承自Queue类，因此可使用同样的方法进行操作。
  - 不同之处在于，写入的元素需要实现__lt__()方法，从而可以被sorted()排序。
- 例：
class Item:
    def __init__(self, priority, data):
        self.priority = priority
        self.data = data

    def __lt__(self, other):
        return self.priority < other.priority

>>> from queue import PriorityQueue
>>> q = PriorityQueue()
>>> q.put(Item(1, "one"))
>>> q.put(Item(3, "three"))
>>> q.put(Item(2, "two"))
>>> q.get().data
'one'
>>> q.get().data
'two'
>>> q.get().data
'three'
##
##
##

## import multiprocessing
## multiprocessing：Python的标准库，用于创建多进程。
- class Process(group=None, target=None, name=None, args:Iterable, kwargs:Mapping[Any, Any], daemon:bool)
  - 功能：定义一个进程。
  - 例：
>>> import multiprocessing
>>> p = multiprocessing.Process(target=print, args=('hello',))
>>> p
<Process(Process-1, initial)>
>>> p.start()
>>> hello
  - 进程的方法。
>>> p.is_alive()
False
>>> p.join(1)
>>> p.terminate()        # 强制终止进程
>>> p.terminate()        # 重复终止不会报错
  - 进程的属性。
>>> p.daemon
False
>>> p.exitcode
0
>>> p.name
'Process-1'
>>> p.pid
2798
## 进程池：用于限制进程的最大运行数量。当进程池满了时，新增的进程会被挂起，直到进程池有空位时才开始运行。
- 例：
>>> pool = multiprocessing.Pool(2)          # 创建一个大小为2的进程池（默认等于CPU核数）
>>> for i in range(5):
...     pool.apply_async(fun1, (i,))        # 往进程池中添加进程
...
0
1
2
3
4
>>> pool.close()        # 关闭进程池，不能再加入进程了
>>> pool.join()        # 阻塞当前进程，等pool里的进程运行结束（需要先调用close()方法）
- def apply_async(func, args=(), kwds={}, callback=None, error_callback=None)
  - 功能：异步地创建进程。
  - 调用apply_async()函数会立即完成，不会等子进程运行结束，不会阻塞当前进程。
## 进程之间的通信方式（Inter-Process Communication，IPC）。
- multiprocessing模块提供了进程之间通信的队列类Queue，用法与类queue相似。
>>> q = multiprocessing.Queue()
>>> q.put("hello")
>>> q.get()
'hello'
##
##
##

## import asyncio
## 协程：即协同程序，又称为异步函数。是指系统在执行某个函数时中断，转去运行另一个函数。
- 协程可以达到多线程并行工作的效果，但它依然是在一个线程内运行。
- 优点：用户可以控制多个协程切换执行的顺序，不用担心线程安全，而且比切换线程的开销小很多。
- 协程常用于实现异步IO。



## Python中可以用关键字async创建协程，用关键字await实现异步工作。
- Python的协程是通过生成器实现的。
- await只能在async函数中使用。
  - await只能调用实现了__await__()方法的对象。
## asyncio：Python的标准库，提供了异步IO的方法。
>>> import asyncio
>>> async def fun1(n):
...     for i in range(n):
...         await asyncio.sleep(1)        # 表示这里要等待1秒的IO，让解释器去执行event_loop中的其它协程
...         print(i)
...
>>> loop = asyncio.get_event_loop()    # 创建事件循环
>>> loop.run_until_complete(fun1(5))    # 开始事件循环
0
1
2
3
4
- async函数不能直接使用，直接调用会返回一个coroutine对象。
>>> fun1(5)
<coroutine object fun1 at 0x7f79d8348a40>
- 可以在event_loop中加入多个任务。
>>> tasks = [asyncio.ensure_future(fun1(i)) for i in [2, 3, 3]]
>>> loop.run_until_complete(asyncio.wait(tasks))
0
0
0
1
1
1
2
2
({<Task finished coro=<fun1() done, defined at <stdin>:1> result=None>, <Task finished coro=<fun1() done, defined at <stdin>:1> result=None>, <Task finished coro=<fun1() done, defined at <stdin>:1> result=None>}, set())
##
##
##








##
##
##


GUI软件
## import tkinter
## tkinter（全名为Tk Interface）是Python的标准GUI包，可以兼容类Unix系统、Windows系统，显示经典桌面风格的GUI界面。
- tkinter通过回调函数来响应事件。
- 编写了基于tkinter的脚本之后，可用pyinstaller打包成可执行文件。
## 显示窗口。
- 创建一个窗口的代码如下：
import tkinter

w1 = tkinter.Tk()                      # 创建一个窗口类（在终端执行该命令时会立即显示窗口）
w1.title("mainWindow")                # 设置窗口的标题

w1.geometry("500x300+0+0")            # 设置窗口的尺寸和坐标，格式为widthxheight+x+y
w1.resizable(width=True, height=True)    # 设置宽度、高度是否可变
w1.minsize(500, 300)                    # 设置窗口的最小尺寸

w1.mainloop()                          # 进入主循环
  - 运行mainloop()时会阻塞当前线程，保持窗口的显示，检测到用户的操作就执行相应的动作。
  - mainloop()必须在创建它的线程中运行，在其它线程中调用会使程序崩溃。
  - 运行mainloop()时，tkinter会抓住一些不重要的异常，即使它们发生了也不会使GUI关闭，只会将报错信息显示在终端上。
- 窗口类有一个attributes()方法，功能很强大，如下：
w1.attributes("-topmost", True,     # 使该窗口置顶
                   # "-fullscreen", True,  # 使该窗口为全屏
                   # "-disabled", True,    # 使该窗口无法操作（用户对它的点击、输入统统无效）
                   # "-toolwindow", True,  # 使该窗口为toolwindow
                   # "-alpha", 0.9,        # 设置该窗口的透明度，0代表完全透明，1代表完全不透明
                   )
  - 设置窗口全屏时不会显示窗口的边框，因此不能点击标题栏上的关闭按钮来关闭它。
  - 设置窗口disable之后，按alt+F4也关闭不了它。
  - 尝试了同时设置窗口topmost、fullscreen、disable，结果发现关闭不了它，连任务管理器都不能调出来。最后，新建了一个win10桌面，打开DOS窗口，用taskkill命令才关闭了该窗口。
##
##
##

控件
## 显示控件（widget）。
- 在tkinter中，每个控件都有三种布局方法：pack()、grid()、place()。例如：
  - pack()方法。
L1.pack()                # 将该控件直接放到窗口上，让它自己调整位置
L1.pack(side="top")        # 设置该控件在窗口的位置，可选top、bottom、left、right
L1.pack(fill='y')        # 设置该控件在某一方向填满窗口，可选none、x、y、both
  - grid()方法。
略
  - place()方法。
L1.place(width=10, height=20, x=10, y=20)        # 设置该控件在父容器中的宽度、高度、坐标
L1.place(relwidth=0.5, relheight=0.5, relx=0.2, rely=0.2)    # 设置相对宽度、高度、坐标
  - 可随时调用三种方法来修改控件的位置，但是调用另一种布局方法时可能会毁掉之前的设置。
  - 每个控件在创建时要指定父容器（master），创建后要调用一个布局方法放到窗口中才能显示。例如：
tkinter.Label(w1, text="one", bg="pink").pack()    # 可以在创建该控件的同时打包
- 窗口、控件都可用destroy()方法销毁，这会同时销毁掉以它为父容器的其它控件。例如：
w1.destroy()
## tkinter提供了多种控件，常用的如下。
- Label：标签。可显示文本或图片。
L1 = tkinter.Label(master=w1, text="label1", fg="#FFF",
                     bg="#000", bd=10, font=("Arial", 12), width=10, height=5)
L1.pack()
L1["text"] = "Hello"    # 修改label的显示内容
  - 输入的参数中，text是要显示的文本（默认居中对齐），fg是前景色（即文本的颜色），bg是后景色（用三个十六进制数或已有的颜色名设定一种颜色，不设置的话就没有颜色，是透明的），bd是边框的宽度。
  - tkinter只支持PNG、GIF、PGM、PPM格式的图片，用以下函数导入：
img = tkinter.PhotoImage(file=r"C:\Users\Will\Desktop\1.png", width=200, height=100)
tkinter.Label(w1, image=img).pack(side="left")

- Frame：框架。用于包装一堆控件，作为它们的master。
F1 = tkinter.Frame(w1)
F2 = tkinter.Frame(F1)
tkinter.Label(F2, text="one").pack()
tkinter.Label(F2, text="two").pack()
F2.pack()
F1.pack()
- Button：按钮。
B1 = tkinter.Button(master=w1, text="close", command=B1.destroy)
B1.pack()
B1.flash()        # 让按钮在未激活与激活的外观之间闪烁几次
  - button控件可以将一个函数名赋值给command，当button被触发（即鼠标左键按下再松开）时就会执行该函数。
  - 可以用lambda函数作为command参数，如下：
B1 = tkinter.Button(w1, text="close", command=lambda: print("closing..."))
- Checkbutton：复选按钮。
Check1_var = tkinter.IntVar()        # 创建一个可及时刷新的变量，用于保存复选按钮的状态（1或0）
Check1 = tkinter.Checkbutton(w1, text = "run", variable = Check1_var)
Check1.pack()

Check1.select()        # 设置为选中状态
Check1.deselect()    # 设置为不选中状态
Check1.toggle()        # 在选中与不选中状态之间切换
Check1.invoke()        # 调用此方法相当于模拟用户点击一次复选按钮

Check1_var.get()        # 通过变量Check1_var获得复选按钮的状态
- Entry：输入框。只能让用户输入一行文本。
E1_var = tkinter.Variable()        # 创建一个可及时刷新的变量，用于保存输入框的文本内容
E1 = tkinter.Entry(w1, textvariable=E1_var)
E1.pack()

def get_entry():
    line=E1_var.get()+'\n'        # 获取输入框的文本内容
    T1.insert("end",line)

B1 = tkinter.Button(w1, text="Entry", command=get_entry)
B1.pack()
- Text：文本框。可以让用户输入多行文本，可以插入文本、图片、按钮，甚至当做网页浏览器使用。
T1=tkinter.Text(w1)
T1.pack()
T1.insert("1.0", "Hello\n")    # 在指定位置插入一个字符串，这个位置可以是第几行或已命名的特殊位置
T1.delete("1.2","end")        # 删除从第一行第2个字符到文本末尾之间的内容

T1.config(state="disabled")    # 使文本框不可编辑（用户和程序都不可以对它编辑）
T1.config(state="normal")        # 使文本框可编辑

B1 = tkinter.Button(w1, text="UP")
T1.window_create("end", window=B1)        # 插入按钮

img = tkinter.PhotoImage(file=r"C:\Users\Will\Desktop\scene.png")
T1.image_create("end", image=img)        # 插入图片

## messagebox：消息框，不需要设定master，可以直接显示，但是同时只能显示一个消息框，关闭之后才会显示下一个。
from tkinter import messagebox        # 从tkinter包中导入messagebox模块

# 显示一个信息框，只有一个“确定”按钮
messagebox.showinfo(title="OK", message="operation completed!")
messagebox.showwarning("warning")
messagebox.showerror("error")

# 显示一个询问框，有“确定”、“取消”两个按钮，被用户点击后分别返回True、False
if messagebox.askokcancel("ask", "即将开始更新，确定or取消"):
    messagebox.showerror("更新失败！")

# 显示一个询问框，有“是”、“否”、“取消”三个按钮，被用户点击后分别返回True、False、None
messagebox.askyesnocancel("ask","是or否or取消")

# 显示一个询问框，有“是”、“否”两个按钮
messagebox.askyesno("ask","是or否")
##
##
##

绑定事件
## 每个控件都可以用方法bind()在某个事件上绑定一个函数，一旦该事件发生就调用该函数，并将一个event对象传给函数。例如：
# 在L1的<ButtonPress-1>事件上绑定一个函数print()
L1.bind("<ButtonPress-1>", print)

# 在L1的<Enter>事件上绑定一个用lambda定义的简单命令
L1.bind("<Enter>", lambda event: print(L1["text"]))

- event对象描述了一个事件的多种信息，使用时自行提取event的属性即可。例如：
E1 = tkinter.Entry(w1, text='')
E1.pack()

def check_status(event):
    print(event)
    print(event.keysym)

E1.bind("<Key>", check_status)

# 运行该程序，按下Esc键，终端的显示如下：
<KeyPress event state=Mod1 keysym=Escape keycode=27 char='\x1b' x=289 y=53>
Escape

- 常用的event如下：
<ButtonPress-1>        鼠标左键按下
<ButtonRelease-1>    鼠标左键释放
<Double-Button-1>    鼠标左键双击
# 把上面三个事件名中的1改成2、3，就变成了鼠标滚轮、鼠标右键

<Enter>                鼠标移入该控件
<Leave>                鼠标离开该控件
<Motion>                鼠标在该控件上方移动
<B1-Motion>            在该控件上方按住鼠标左键的前提下，移动鼠标
<FocusIn>            该控件得到焦点（比如用户按Tab切换到它）
<FocusOut>            该控件失去焦点

<Key>                按住任意按键（注意是“按住”，如果用户一直按着，就会反复触发）
# 可以按下任意按键，用.bind("<Key>", print)查看该event的内容，其中就包括键名和键值
# 如果按下字母按键时被中文输入法挡住，程序可能会读取到异常的键值，导致程序出错
<Key-Return>            按住回车键
<Key-y>                输入小写的y
<Key-Y>                输入大写的Y（比如按Shift+Y输入，后切换大小写）
<Shift-Y>            在按住Shift的前提下，按住Y

<Configure>            窗口的大小改变

  - 可以自定义event，需要在前后各加两个尖括号，例如：
E1.bind("<<myEvent>>", print)
- 每个控件都可以用event_generate()方法主动生成一个事件，例如：
E1.bind("<Key-Return>", print)
E1.event_generate("<Key-Return>", when="tail")        # when="tail"是为了让该事件按顺序排队
  - 如果事件是<Key>类型，当焦点不在该控件上时，生成一个事件该控件也不会有反应。
  - 可以使用方法after(self, ms, func=None, *args)让tkinter在指定毫秒后执行某函数（这是tkinter内置的方法，如果使用time.sleep实现该功能就会阻塞线程）。
- bind()方法不输入参数则返回绑定的事件元组，可以用unbind()解绑一个事件。例如：
>>> E1.bind("<<myEvent>>", print)
'15615600print'
>>> print(E1.bind())
('<<myEvent>>',)
>>> E1.unbind("<<myEvent>>")
>>> print(E1.bind())
()
  - 对窗口进行绑定，例如w1.bind()，会绑定其中的所有子控件。
##
##
##

## import PyQt5
## PyQt5：Python的第三方库，使得Python可以调用Qt5的大部分API。
- 安装：pip install PyQt5==5.10 PyQt5-sip==12.7.0
  - PyQt5-sip库用于让PyQt调用Qt的C++ API。
- 例：
from PyQt5.QtWidgets import QApplication, QWidget
import sys

app = QApplication(sys.argv)    # 每个Qt程序在启动时首先要创建一个QApplication对象，可以输入参数
w = QWidget()                # 创建主窗口
w.show()                        # 显示窗口

sys.exit(app.exec())            # 进入app的主循环，一旦app结束就终止程序

- Qt是一个GUI软件开发框架，基于C++，兼容Windows、Linux、MacOS、iOS、Android。
  - Qt5重构了底层模块，不兼容Qt4。
- 控件：指UI上显示的各种对象，比如窗口、按钮。
  - 通常先创建一个顶级窗口，再以它为父控件，创建其它控件。
  - 当父控件被销毁时，它的所有子控件都会被自动销毁。
  - 多个控件可以叠加显示在同一位置，后显示的控件会显示在上层。
##
##
##
##
##

Qtcore模块
##
##
##
## QTimer类：定时器。
- QTimer(parent: QObject = None)
- 例：
>>> timer = QTimer(w)                            # 创建一个定时器
>>> timer.timeout.connect(lambda:print(1))        # 绑定timeout信号
<PyQt5.QtCore.QMetaObject.Connection object at 0x000001EA668E9668>
>>> timer.setInterval(1000)                    # 设置触发timeout信号的间隔时间（单位为毫秒）
>>> timer.start()                                # 启动定时器（定时器会一直运行，循环触发timeout信号）
1                                            # 可以用timer.start(1000)，在启动时设置间隔时间
1
1
>>> timer.stop()                                # 停止定时器）
>>> timer.start()                                # 可以再次启动
1
1
1
- 下例是设置定时任务，定时器触发一次timeout信号之后就自动停止。
>>> QTimer.singleShot(1000, lambda:print(1))
1
##
##
## QThread类：多线程。
- 用法：自定义一个类，继承QThread类，并重载run()方法。
- 与Python自带的Threading模块相比，QThread创建的线程可以方便地使用信号进行通信。但依然受到GIL的限制。
##
##
##

处理事件
## 为了让Qt程序处理用户触发的事件，可以设置信号与槽函数，也可以重载控件的某种事件的处理函数。
## 信号与槽函数：将控件的某个信号绑定到一个槽函数。
- 例：
w = QWidget()
b = QPushButton("Close", w)
b.clicked.connect(w.close)        # 将一个信号对象与一个槽函数绑定
b.clicked.disconnect(w.close)        # 解绑（如果不存在该绑定关系则报错）

  - 当用户单击按钮时，按钮控件会发送click信号给所有与之绑定的槽函数，从而对该事件做出响应。
  - 一个信号对象可以绑定多个槽函数。
  - 可以将一个信号对象与另一个信号对象绑定，即前一个信号发生时会触发后一个信号。
b2 = QPushButton("Button2", w)
b2.clicked.connect(b.clicked)
- 例：
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtCore import pyqtSignal

class MyWindow(QWidget):
    _signal = pyqtSignal(str)        # 自定义一个信号，它的形参列表要与其槽函数一致

    def __init__(self):
        super().__init__()
        self._signal.connect(self._slot)
        self._signal.emit("testing...")    # 可以用emit()方法主动发送某种信号

    def _slot(self, string):
        print(string)
        print(self.sender())        # 在槽函数中，可以用self.sender()方法返回信号的发送者的引用

## 常见的信号对象。
- clicked
-
-
-
-
-
## 重载控件的某种事件的处理函数。
- 例：
class Example(QWidget):
    def __init__(self):
        super().__init__()
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:        # 如果用户按下Esc键，则关闭窗口
            self.close()
-
## 常见的事件处理函数。
- def keyPressEvent(self, event):
    print(event.key())        # 获取用户按下的按键键值，比如按键A的键值是65（不受大小写的影响）
- def mouseMoveEvent(self, event):
    print(event.pos())        # 获取鼠标在窗口内的相对坐标
    print(event.globalPos())    # 获取鼠标在窗口内的全局坐标
  - 默认当用户按住鼠标并移动时才会触发mouseMoveEvent事件。如果设置self.setMouseTracking(True)，则只要用户在窗口范围内移动鼠标，就会触发mouseMoveEvent事件。
-
##
##


QTime类
## QTime类。
- 例：
>>> time = QTime.currentTime()        # 获取当前时间
>>> time
PyQt5.QtCore.QTime(22, 8, 3, 113)        # 一个QTime对象包含时、分、秒、毫秒四项参数
>>> time.hour()
22
>>> time.minute()
8
>>> time.second()
3
>>> time.msec()
113
>>> time.toPyTime()                    # 转换成datetime对象
datetime.time(22, 8, 3, 113000)
>>> time.toString()                    # 转换成字符串
'22:08:03'
## QDate类。
- 例：
>>> date = QDate.currentDate()
>>> date.year()
2019
>>> date.month()
10
>>> date.day()
9
>>> date.dayOfWeek()                    # 获取周几
3
>>> date.toPyDate()
datetime.date(2019, 10, 9)
## QDateTime类。
- 例：
>>> datetime = QDateTime.currentDateTime()
>>> datetime
PyQt5.QtCore.QDateTime(2019, 10, 9, 22, 19, 14, 330)
>>> datetime.toTime_t()            # 转换成时间戳
1570630754
>>> datetime.toPyDateTime()        # 转换成datetime对象
datetime.datetime(2019, 10, 9, 22, 19, 14, 330000)
- PyQt获取的时间默认为本地时间。
>>> datetime_UTC = QDateTime.currentDateTimeUtc()        # 获取UTC时区的时间
>>> datetime.timeZone().id()                            # 查看时区
PyQt5.QtCore.QByteArray(b'Asia/Shanghai')
>>> datetime.toUTC()                                    # 转换成UTC时间
PyQt5.QtCore.QDateTime(2019, 10, 9, 14, 19, 14, 330, PyQt5.QtCore.Qt.TimeSpec(1))
>>> datetime_UTC.toLocalTime()                        # 转换成本地时间
PyQt5.QtCore.QDateTime(2019, 10, 9, 22, 19, 14, 330)
>>> datetime_UTC.toLocalTime().toLocalTime()            # 重复转换也不会出错，该操作有幂等性
PyQt5.QtCore.QDateTime(2019, 10, 9, 22, 19, 14, 330)
##
##
##

QtWidgets模块
QApplication类
## QApplication类：用于创建Qt应用（它采用单例模式）。需要导入：from PyQt5.QtWidgets import QApplication
- app = QApplication.instance()
  - 功能：返回Qt应用的引用，总是返回一个单例对象。
- app.closeAllWindows() -> None
  - 功能：关闭所有窗口。
- app.quit() -> None
  - 功能：终止Qt应用。
-
  - 功能：
-
  - 功能：
-
  - 功能：
-
  - 功能：

##
##
##
##
##

QWidget类
## QWidget类：用于创建普通窗口。需要导入：from PyQt5.QtWidgets import QWidget
- QWidget是所有窗口的基类，是QDialog、QMainWindow、QFrame的父类。
- w = QWidget(parent: QWidget = None)
  - 功能：创建一个窗口。
  - 如果它没有父控件，它就会成为唯一的顶级窗口。
- w.show() -> None
  - 功能：显示控件。
  - 父控件在第一次显示时会初始化布局，将它的各个子控件也显示出来。如果在父控件初始化之后才加入子控件，则需要主动调用子控件的show()方法。
- w.close() -> bool
  - 功能：关闭控件的显示（但并没有销毁）。
  - 如果成功关闭显示，或者该控件本来就没有显示，则返回True。
-
-
## 窗口的特有方法。
- w.setWindowTitle(str) -> None
  - 功能：设置窗口的标题。
- w.setWindowIcon(QIcon) -> None
  - 功能：设置窗口的图标。
  - 例：
from PyQt5.QtGui import QIcon
w.setWindowIcon(QIcon(r"C:\Users\Leo\Pictures\1.jpg"))
- w.isMaximized() -> bool
  - 功能：判断窗口是否被最大化了。
  - 窗口最大化时不一定是全屏，比如限制了窗口最大尺寸时，不能填满屏幕。
- w.isMaximized() -> bool
  - 功能：判断窗口是否被最小化了。
## 控件的通用方法。
- w.setFocus() -> None
  - 功能：使控件得到焦点。
- w.setEnabled(bool) -> None
  - 功能：设置控件是否可以被用户操作，这会影响到它的所有子控件。
- w.isActiveWindow() -> bool
  - 功能：判断控件是否获得了屏幕焦点。
- w.isVisible() -> bool
  - 功能：判断控件现在是被show()显示了，还是被close()关闭显示了。
- w.setToolTip(str) -> None
  - 功能：设置提示语。当鼠标悬停在该控件上方时就会立即显示。
  - 例：
w.setToolTip("This is a tip.\n")                            # 支持转义字符
w.setToolTip("这是一个提示。")                                # 支持Unicode字符
w.setToolTip('This is a <font color="red">tip</font>.')        # 支持HTML语法
  - 可定义ToolTip的字体：
from PyQt5.QtWidgets import QToolTip
from PyQt5.QtGui import QFont
QToolTip.setFont(QFont("微软雅黑", 12))
w.setToolTip('This is a <font color="red">tip</font>.')
-
  - 功能：
-
  - 功能：
-
  - 功能：
-
##
##
##
##

QMainWindow类
## QMainWindow类：用于创建包含菜单栏、工具栏、状态栏的经典风格的窗口。
- w = QMainWindow(parent: QWidget = None)
  - 功能：创建一个主窗口。
## 菜单栏。
- menubar = w.menuBar()
  - 功能：第一次调用将创建菜单栏，重复调用将返回菜单栏这个单例对象的引用。
- menubar.addMenu(str) -> QMenu                # 输入名字
menubar.addMenu(QIcon, str) -> QMenu        # 输入图标和名字
menubar.addMenu(QMenu) -> QMenu            # 输入一个QMenu对象
  - 功能：加入一个菜单。
  - 可以在一个菜单中嵌套另一个菜单，称为子菜单。例：
file_menu = menubar.addMenu("File")
sub_menu = file_menu.addMenu("Recent Files...")
- QMenu.addAction(str) -> QAction
QMenu.addAction(QIcon, str) -> QAction
QMenu.addAction(QAction) -> QAction
  - 功能：在某个菜单下加入一个动作（按钮）。
  - 下例是定义一个普通的动作：
from PyQt5.QtWidgets import QAction

# 定义动作
exit_action = QAction(QIcon(r'C:\Users\Leo\Pictures\1.jpg'), "Exit", w)
exit_action.setShortcut("Ctrl+Q")                        # 设置快捷键
exit_action.setStatusTip("Exit the application.")        # 设置显示在状态栏的提示
exit_action.triggered.connect(app.quit)                # 绑定到一个槽函数

menubar = w.menuBar()
file_menu = menubar.addMenu("File")        # 创建菜单
file_menu.addAction(exit_action)            # 添加动作
  - 下例是定义一个勾选的动作：
def debug_mode(state):        # 触发该槽函数时，会传入一个参数，表示当前按钮是否被勾选
    if state:
        w.statusBar().showMessage("Debug mode is enabled")
    else:
        w.statusBar().showMessage("Debug mode is disabled")

debug_action = QAction("Debug mode", w, checkable=True)
debug_action.setChecked(True)        # 设置按钮初始的状态是否被勾选
debug_action.triggered.connect(debug_mode)

menubar = w.menuBar()
fileMenu = menubar.addMenu("fileMenu")
fileMenu.addAction(debug_action)
- QAction(parent: QWidget = None) -> QAction
QAction(str, parent: QWidget = None) -> QAction
QAction(QIcon, str, parent: QWidget = None) -> QAction
  - 功能：定义一个动作。
## 上下文菜单：即右键菜单。
- 定义上下文菜单需要重载contextMenuEvent()方法。如下：
class MyWindow(QMainWindow):
    def contextMenuEvent(self, event):
        contextMenu = QMenu(self)
        open_action = contextMenu.addAction("open")
        quit_action = contextMenu.addAction("quit")

## 工具栏：显示一些常用的动作，便于使用。
- 例：
w.exit_tool = w.addToolBar("Exit")
w.exit_tool.addAction(exit_action)
## 状态栏。
- statuebar = w.statusBar()
  - 功能：第一次调用将创建状态栏，重复调用将返回状态栏这个单例对象的引用。
- statuebar.showMessage(str, msecs: int = 0)
  - 功能：在状态栏中显示一行字符串。默认永久显示，输入msecs参数可设置最大显示时长。
##
##
##

坐标、尺寸
## 坐标。
- w.pos() -> QPoint
  - 功能：查看控件的坐标，返回一个QPoint对象。
  - 例：
>>> w.pos()
PyQt5.QtCore.QPoint(639, 237)
>>> pos = w.pos()
>>> pos.x()
639
>>> pos.y()
237
  - 顶级窗口的坐标代表其左上角相对于屏幕左上角的距离，子控件的坐标代表其左上角相对于父控件左上角的距离。
  - 顶级窗口的坐标可以移动到屏幕之外，子控件的坐标可以移动到父控件的显示区域之外。
>>> w.mapToGlobal(w.pos())        # 从局部坐标转换成全局坐标（即加上当前控件的坐标）
PyQt5.QtCore.QPoint(1279, 512)
>>> w.mapFromGlobal(w.pos())        # 从全局坐标转换成局部坐标（即减去当前控件的坐标）
PyQt5.QtCore.QPoint(-1, -38)
- w.move(int, int) -> None            # 输入横坐标x、纵坐标y（单位为pixel）
w.move(QPoint) -> None            # 输入一个QPoint对象
  - 功能：移动控件到指定坐标。
## 尺寸。
- w.size() -> QSize
  - 功能：查看控件的尺寸，返回一个QSize对象。
  - 例：
>>> w.size()
PyQt5.QtCore.QSize(640, 480)
>>> size = w.size()
>>> size.width()
640
>>> size.height()
480
- w.resize(int, int) -> None        # 输入宽度width、高度height（单位为pixel）
w.resize(QSize) -> None            # 输入一个QSize对象
  - 功能：调整控件的尺寸。
  - 控件的尺寸不能设置为0或负数，否则控件会被关闭显示。
  - 控件的尺寸不能超过屏幕的可用显示范围，即使用resize()设置了更大的尺寸也不会生效，即使用户用鼠标拖动窗口边框也不能变得更大。
- w.adjustSize() -> None
  - 功能：根据控件需要显示的内容，自动调整尺寸。
- 设置最大尺寸。
w.setMaximumHeight(int) -> None
w.setMaximumWidth(int) -> None
w.setMaximumSize(int, int) -> None
w.setMaximumSize(QSize) -> None
- 设置最小尺寸。
w.setMinimumHeight(int) -> None
w.setMinimumWidth(int) -> None
w.setMinimumSize(int, int) -> None
w.setMinimumSize(QSize) -> None
- 设置固定尺寸。
w.setFixedHeight(int) -> None
w.setFixedWidth(int) -> None
w.setFixedSize(int, int) -> None
w.setFixedSize(QSize) -> None
  - 可以在程序运行时随时改变窗口的尺寸，但是如果设置了固定尺寸，用户就不能再拖动窗口的边界了，只能由程序改变。
## 几何属性。
- w.geometry() -> QRect
  - 功能：查看控件的几何属性，返回一个QRect对象。
  - 例：
>>> w.geometry()
PyQt5.QtCore.QRect(640, 275, 640, 480)
>>> geometry = w.geometry()
>>> geometry.x()            # QRect对象兼容QPoint对象、QSize对象的属性和方法
640
>>> geometry.y()
275
>>> geometry.width()
640
>>> geometry.height()
480
- w.setGeometry(int, int, int, int) -> None        # 输入x、y、width、height
w.setGeometry(QRect) -> None                    # 输入一个QRect对象
  - 功能：设置控件的几何属性。
  - QRect对象提供了一些移动控件的方法，但不会影响到原控件。可以先修改QRect对象，再把它应用到原控件。
>>> geometry = w.geometry()
>>> geometry.right()                # 同理还有left()、top()、bottom()
1279
>>> geometry.moveRight(1000)        # 同理还有moveLeft()、moveTop()、moveBottom()
>>> geometry.topLeft()            # 同理还有topRight()、bottomLeft()、bottomRight()、center()
PyQt5.QtCore.QPoint(361, 275)        # 返回一个QPoint对象
>>> geometry.moveTopLeft(geometry.center())
# 同理还有moveTopRight()、moveBottomLeft()、moveBottomRight()、moveCenter()
>>> w.setGeometry(geometry)        # 把QRect对象应用到原控件
## 获取桌面的尺寸信息。
- 获取桌面窗口的实例：
>>> from PyQt5.QtWidgets import QDesktopWidget
>>> desktop = QDesktopWidget()
- 它兼容QWidget的部分方法，可像QWidget一样查看尺寸：
>>> desktop.size()
PyQt5.QtCore.QSize(1920, 1080)
- 它的特有方法：
>>> desktop.availableGeometry()                # 查看桌面的可用显示范围（略小于屏幕尺寸，因为要减去边框）
PyQt5.QtCore.QRect(0, 0, 1920, 1030)
##
##

布局
## 设置控件的位置时，使用布局方法比使用绝对坐标更好，因为使用布局方法可以适应窗口的伸缩变化，而且在不同平台上的显示效果都一致。
- 不可以直接将多个水平布局、垂直布局组合在一起，但可以将一个布局嵌套成另一个布局中的元素。
- 给一个控件设置了布局之后，只能在该布局的基础上进行修改，不能换成另一个布局。
## QHBoxLayout类：用于实现水平布局（Horizontal Layout），使多个控件在水平方向均匀排列。
## QVBoxLayout类：用于实现垂直布局（Vertical Layout），使多个控件在垂直方向均匀排列。
- 例：
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QVBoxLayout
import sys

app = QApplication(sys.argv)
w = QWidget()
w.show()
button1 = QPushButton("One")
button2 = QPushButton("Two")

hbox = QHBoxLayout()            # 创建一个水平布局（即一行空间）
hbox.addStretch(1)            # 添加一个拉伸因子（拉伸因子会尽可能地挤占空白空间）
hbox.addWidget(button1)        # 添加控件（这些空间会按添加的先后顺序排列）
hbox.addWidget(button2)

vbox = QVBoxLayout()            # 创建一个垂直布局（即一列空间）
w.setLayout(vbox)            # 采用该布局（之后再修改该布局时，会立即生效）
vbox.addStretch(1)
vbox.addLayout(hbox)            # 添加一个布局作为元素
  - 拉伸因子的值越大，挤占空间的优先级越高。
## QGridLayout类：用于实现网格布局，将空间分成多行多列，将控件放在某个格子内，或者占据多个格子。
- 例：
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QGridLayout
import sys

app = QApplication(sys.argv)
w = QWidget()
w.show()

grid = QGridLayout()
w.setLayout(grid)
grid.setSpacing(10)        # 设置每个格子的间距

button1 = QPushButton("Send")
grid.addWidget(button1)                # 添加一个控件，默认使用垂直布局
grid.addWidget(button1, 0, 0)            # 添加一个控件，放在第0行、第0列
textEdit1 = QTextEdit()
grid.addWidget(textEdit1, 1, 0, 2, 2)    # 添加一个控件，占据从第1行、第0列到第2行、第2列之间的格子

- 下例是添加一些按矩阵排列的控件：
positions = [(i, j) for i in range(5) for j in range(4)]
names = ['Cls', 'Bck', '', 'Close',
         '7', '8', '9', '/',
         '4', '5', '6', '*',
         '1', '2', '3', '-',
         '0', '.', '=', '+']
for position, name in zip(positions, names):
    if name == '':
        continue
    button = QPushButton(name)
    grid.addWidget(button, *position)
##
##
##

控件
按钮
## QPushButton类：普通按钮。
- QPushButton(parent: QWidget = None)                # 只输入父控件，则显示一个空白按钮
QPushButton(str, parent: QWidget = None)            # 输入显示内容、父控件
QPushButton(QIcon, str, parent: QWidget = None)        # 输入图标、显示内容、父控件
- 例：
>>> button = QPushButton("Quit", w)
>>> button.clicked.connect(QApplication.instance().quit)    # 将按钮按下的信号绑定到一个槽函数
>>> button.text()                                # 返回按钮的名字
'Quit'
- 可以让普通按钮保持在“按下”或“未按下”状态。
def changeState(pressed):
    if pressed:
        print("On")
    else:
        print("Off")

button.setCheckable(True)                        # 使普通按钮可以保持状态
button.clicked[bool].connect(changeState)        # 绑定信号
button.toggle()                                # 切换状态
## QToolButton类：点击时不会显示虚线边框。
## QCheckBox类：勾选按钮。有“选中”、“未选中”两种状态。
- QCheckBox(parent: QWidget = None)
QCheckBox(str, parent: QWidget = None)
- 例：
def changeState(self, state):
    if state == Qt.Checked:
        print("On")
    else:
        print("Off")

>>> checkBox = QCheckBox("On", w)
>>> checkBox.stateChanged.connect(changeState)        # 将状态改变的信号绑定到一个槽函数
>>> checkBox.isChecked()                            # 判断是否被选中了
True
>>> checkBox.setChecked(True)                        # 设置状态
>>> checkBox.toggle()                                # 切换状态
## QRadioButton类：单选按钮。
##
##
##
##
##
##
##
##
##
##
##
##
##

关于输入
## QLineEdit类：单行输入框，用于输入一行字符串。
- QLineEdit(parent: QWidget = None)
QLineEdit(str, parent: QWidget = None)        # str参数表示输入框的初始内容
- 例：
>>> lineEdit = QLineEdit(w)
>>> lineEdit.show()
>>> lineEdit.setText("hello")            # 设置输入框的内容
>>> lineEdit.text()                    # 获取输入框的内容
'hello'
>>> lineEdit.setMaxLength(10)            # 设置输入内容的最大长度
>>> lineEdit.setReadOnly(True)        # 使输入框变成只读
>>> lineEdit.setEchoMode(QLineEdit.Password)        # 使输入框的内容按密文显示
- 常用信号：
lineEdit.textChanged.connect(...)            # 当输入框的内容改变时（不管是被用户改变，还是被程序改变）
lineEdit.editingFinished.connect(...)        # 当用户输入结束时（比如按下回车、焦点从输入框移动到其它控件）
lineEdit.selectionChanged.connect(...)        # 当用户的选中范围改变时（没有选中范围时不会触发）
## QTextEdit类：多行输入框，用于输入多行字符串，可以插入富文本。
- QTextEdit(parent: QWidget = None)
QTextEdit(str, parent: QWidget = None)
- 当输入的字符串行数过多时，会自动显示一个垂直滚动条。
- 例：
>>> textEdit = QTextEdit(w)
>>> textEdit.show()
>>> textEdit.toPlainText("Hello")            # 设置输入框的纯文本内容
>>> textEdit.toPlainText()                # 获取输入框的纯文本内容（QTextEdit对象没有text()方法）
'Hello'
>>> textEdit.setHtml("<h1>标题一</h1>")    # 设置输入框的html内容
>>> textEdit.toHtml()                        # 获取输入框的html内容
'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n<html><head><meta name="qrichtext" content="1" /><style type="text/css">\np,...
>>> textEdit.clear()                        # 清空输入框
- 关于插入文本：
>>> textEdit.append("Hello")                    # 在末尾附加内容（这会新起一行）
>>> from PyQt5.QtGui import QTextCursor
>>> textEdit.moveCursor(QTextCursor.Start)        # 将光标移动到最前面
>>> textEdit.moveCursor(QTextCursor.End)        # 将光标移动到最后面
>>> textEdit.insertPlainText("Hello")            # 在光标处插入纯文本
>>> textEdit.insertHtml("<h1>标题一</h1>")        # 在光标处插入html
- 下例是将stdout、stderr重定向到textEdit。
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtCore import QObject, pyqtSignal
from PyQt5.QtGui import QTextCursor

class EmittingStream(QObject):
    output = pyqtSignal(str)      # 定义output信号，接收一个str参数
    def write(self, text):
        self.output.emit(str(text))
    def flush(self):
        pass

class MyWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.log_view = QTextEdit(self)

        # 重定向stdout、stderr，让它们触发output信号，并把信号绑定到logger槽函数
        sys.stdout = EmittingStream(output=self.logger)
        # sys.stderr = sys.stdout        # 重定向stderr的话，程序就不能捕捉异常，容易崩溃

    def logger(self, text):
        """ 接收log信号的槽函数，用于记录日志 """
        self.log_view.moveCursor(QTextCursor.End)
        self.log_view.insertPlainText(text)

# 尝试发送stdout、stderr
print("hello")
raise RuntimeError("testing...")

## QComboBox类：下拉列表。
- QComboBox(parent: QWidget = None)
- 例：
>>> combo = QComboBox(w)
>>> combo.show()
>>> combo.addItem("One")        # 添加一个选项（只是显示一个str）
>>> combo.addItem("Two")
>>> combo.currentText()        # 获取当前的选项
'One'
- 常用信号：
def onActivated(text):
    print(text)

combo.activated[str].connect(onActivated)
## QScrollBar类：滚动条，用于拖动显示区域。
## QSlider类：滑动条，用户可以通过拖动滑动条来调整某个数值。
- QSlider(parent: QWidget = None)
QSlider(Qt.Orientation, parent: QWidget = None)
  - Qt.Orientation有水平、竖直两种显示方向，默认是Qt.Vertical，可设置成Qt.Horizontal。
- 例：
>>> slider = QSlider(Qt.Horizontal, w)            # 创建一个水平显示的滑动条
>>> slider.show()
>>> slider.setValue(100)                        # 设置值（取值范围为0~99，超出范围则设置成最大/小值）
>>> slider.value()
99
- 常用信号：
def changeValue(value):
    print(value)
slider.valueChanged[int].connect(changeValue)    # 绑定取值改变的信号（取值范围为0~99）
## QCalendarWidget类：日历。用于让用户方便地选择一个日期。
- QCalendarWidget(parent: QWidget = None)
- 例：
def getDate(date):    # 传入的date参数是QDate对象
    print(date.toString())

calendar = QCalendarWidget(w)
calendar.show()
calendar.clicked[QDate].connect(getDate)
##
##
##
##
##
##
##
##
##

关于输出
## QLabel类：标签，用于显示一个只读的字符串。
- QLabel(parent: QWidget = None)
QLabel(str, parent: QWidget = None)
- 例：
>>> label = QLabel("hello", w)
>>> label.show()
## QProgressBar类：进度条。
- QProgressBar(parent: QWidget = None)
- 例：
>>> progressBar = QProgressBar(w)
>>> progressBar.show()
>>> progressBar.setValue(100)        # 设置进度值。取值范围为0~100
>>> progressBar.value()
100
>>> progressBar.setValue(99.99)    # 小数部分的值会被舍去
>>> progressBar.value()
99
##
##
##
##
##
##
##
##
##
##
##
##
##
##

关于布局
## QFrame类：框架，用于将多个控件组合在一起。
## QSplitter类：分割器。插入到控件之间，从而用户用户拖动控件的边界。
- QSplitter(parent: QWidget = None)
QSplitter(Qt.Orientation, parent: QWidget = None)
- 例：
from PyQt5.QtWidgets import QApplication, QWidget, QFrame, QHBoxLayout, QSplitter
from PyQt5.QtCore import Qt
import sys

app = QApplication(sys.argv)
w = QWidget()

frame1 = QFrame(w)
frame1.setFrameShape(QFrame.StyledPanel)    # 设置frame的主题，以支持QSplitter
frame2 = QFrame(w)
frame2.setFrameShape(QFrame.StyledPanel)
frame3 = QFrame(w)
frame3.setFrameShape(QFrame.StyledPanel)

splitter1 = QSplitter(Qt.Horizontal)        # 创建一个水平方向的分割器splitter1
splitter1.addWidget(frame1)                # 用splitter1分割topleft和topright
splitter1.addWidget(frame2)

splitter2 = QSplitter(Qt.Vertical)
splitter2.addWidget(splitter1)
splitter2.addWidget(frame3)

hbox.addWidget(splitter2)
##
##
## QTableView
## QListView
## QTreeView
## QListWidget
## QTableWidget
## QTabWidget
## QStackedWidget
## QDockWidget
##
##
##
##
##

对话框
## QDialog类：所有对话框窗口的基类。
## QInputDialog类：输入对话框。
- 例：
text, ret = QInputDialog.getText(w, "Input Dialog", "Please input your name:")
if ret:
    print("Your name is:" + text)
  - text存储用户输入的文本，ret是一个bool值，表示用户是否点击了Yes按钮。
## QFontDialog类：选择字体的对话框。
- 例：
font, ret = QFontDialog.getFont()
if ok:
    lable.setFont(font)
## QColorDialog类：选择颜色的对话框。
- 例：
color = QColorDialog.getColor()
if color.isValid():
    w.setStyleSheet("QWidget {{ background-color: {} }}".format(color.name()))
## QFileDialog类：选择文件的对话框。
- 选择一个文件：
filename, _filter = QFileDialog.getOpenFileName(w, "Open file", ".", "*.py")
                    # 输入参数：父控件、窗口名、打开的目录、筛选的文件名
                    # 返回的filename和_filter都是str型
if filename:
    with open(filename, "r") as f:
        textEdit.setText(f.read())
- 选择多个文件：
filenames, _filter = QFileDialog.getOpenFileNames(w, "Open files", ".", "*.py")
                    # 返回的filenames是一个字符串列表
- 选择保存文件的路径：
>>> QFileDialog.getSaveFileName(w, "Save to", ".", "*.py")
('D:/1/move_files/src/1.py', '*.py')
- 选择一个目录：
>>> QFileDialog.getExistingDirectory(w, "Open file", ".")
'D:/1'
## QMessageBox类：消息框，用于通知用户某个消息。
- 提问框：有Yes、No两个选项。
>>> reply = QMessageBox.question(w, "标题...", "内容...")
>>> reply == QMessageBox.Yes
True
>>> reply == QMessageBox.No        # 当用户点击No选项或关闭按钮时，返回值为QMessageBox.No
False
- 提示框：只有一个Ok选项。
>>> reply = QMessageBox.information(w, "标题...", "内容...")
>>> reply == QMessageBox.Ok        # 当用户点击Ok选项或关闭按钮时，返回值为QMessageBox.Ok
True
- 警告框：只有一个Ok选项。
>>> reply = QMessageBox.warning(w, "标题...", "内容...")
>>> reply == QMessageBox.Ok
True
- 错误框：只有一个Ok选项。
>>> reply = QMessageBox.critical(w, "标题...", "内容...")
>>> reply == QMessageBox.Ok
True
##
##
##
##
##
##
##

QtGui模块
## QFont类：用于选择字体。
- 例：
>>> from PyQt5.QtGui import QFont
>>> QFont("微软雅黑", 12)        # 输入字体名、字号
<PyQt5.QtGui.QFont object at 0x0000023BE20F9358>
## QColor类：用于选择颜色。
- QColor(int, int, int, alpha: int = 255)
  - 前三个参数代表RGB三个通道的值（取值为0~255），alpha参数表示不透明度。
- 例：
>>> from PyQt5.QtGui import QColor
>>> color = QColor(0, 0, 255)            # 选择颜色
>>> color.name()                        # 返回颜色的十六进制值
'#0000ff'
>>> color.isValid()                    # 判断是否为有效的颜色值
True
  - 可以单独访问red、green、blue、alpha通道。
>>> color.alpha()
255
>>> color.setAlpha(0)
## QIcon类：用于导入图片。
- 例：
>>> from PyQt5.QtGui import QIcon
>>> QIcon(r"C:\Users\Leo\Pictures\1.jpg")
<PyQt5.QtGui.QIcon object at 0x0000023BE1C45C18>
## QPixmap类：用于显示图片。
- 例：
>>> pic = QPixmap(r"C:\Users\Leo\Pictures\1.jpg")
>>> label = QLabel(w)
>>> label.setPixmap(pic)            # 用图片填充label
>>> label.show()
>>> w.adjustSize()
## QPainter类：用于绘画。
##
## stylesheet：样式表。
- 子控件会自动继承父控件的stylesheet，为了避免这种情况，应该注明stylesheet的作用对象，如下：
QMainWindow{                            # 作用于QMainWindow类对象
background-color: rgb(255, 255, 0);
color: rgb(255, 85, 0);
}
QMainWindow:mainwindow{                # 只作用于mainwindow对象
background-color: rgb(255, 255, 0);
color: rgb(255, 85, 0);
}
-
##
##

## import pyqt5-tools
## pyqt5-tools：Python的第三方库，提供了Qt的一些工具。
- 安装：pip install PyQt5-tools==5.10.1.1.3
  - 这些工具安装在Python/Scripts目录下，并且注册在环境变量PATH中，可以输入工具名直接调用。
-
-
## designer：用于设计Qt的GUI界面，生成.ui文件。
- 用法：用designer.exe启动，或在命令行输入designer启动。
##
##
##
##
##
## pyuic5：用于将.ui文件转换成.py文件。
- 用法：
pyuic5 mainwindow.ui -o mainwindow_ui.py
- 可以将.ui文件转换成.py文件之后再导入，如下：
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from mainwindow_ui import Ui_MainWindow

class MyWindow(QMainWindow, Ui_MainWindow):  # 多继承，QMainWindow是基类，Ui_MainWindow用于配置
    def __init__(self):
        super().__init__()
        self.setupUi(self)

app = QApplication(sys.argv)
w = MyWindow()
w.show()
sys.exit(app.exec())
- 也可以直接导入.ui文件（但这样不能打包到exe文件中），如下：
from PyQt5 import uic

class MyWindow(QMainWindow):                # 不继承
    def __init__(self):
        super().__init__()
        uic.loadUi("mainwindow.ui", self)    # 调用其setupUi()方法
## pyrcc5：用于将.qrc文件转换成.py文件，便于打包。
- 用法：
pyrcc5 resource.qrc -o resource.py
- 导入图片等资源文件的方法有两种：
  - 使用文件路径直接导入，但这样必须将资源文件与程序打包到同一个文件夹发布。
  - 把资源文件记录到.qrc文件中（使用designer的资源窗口），再转换成.py文件，然后在主脚本中导入。如下：
import resource
QIcon(r":resource/img/logo.ico")    # 使用冒号:加文件路径导入图片，该路径必须与.qrc文件中的一致
##
## 用pyinstaller打包PyQt程序。
1.    写好程序，能用Python解释器成功启动。
2.    将.qrc文件转换成.py文件，然后在主脚本中导入。
3.    到源代码目录下，执行：
pyinstaller mainwindow.py -w -i resource/img/logo.ico
  - 如果启动失败，就先不用-w选项，在终端启动，可以看到报错信息。
4.    将源代码目录下的.ui文件、resource目录都拷贝到dist目录下，因为程序打包时没有集成它们，还需要按相对路径导入。
##
##
##
##
##
##
##
##

designer
##
##
## 按F4进入信号-槽的设置模式
可以自定义signal或slot，等导入该ui文件时再定义相应的方法。

## 在designer中导入图片等资源时，要先点击Resource菜单，创建一个.qrc文件，用于记录导入的所有资源。
- 也可以直接导入文件路径。
##
## 自定义widget，做成插件后便可以显示在designer左侧的widget列表中，也可以通过“promoted widget”功能导入。
https://www.xdbcb8.com/archives/1675.html
https://ilmvfx.wordpress.com/2016/02/16/use-promoted-widgets-in-qt-designer/
##
##
##
##
##
##



# 设计模式

## 设计模式的根本目的是解耦、提高效率。
## Python作为动态语言，其设计模式的实现方法与Java等静态语言不同。有些设计模式Python用自身的语法就可以实现。
##
## 面向对象编程（Object Oriented Programming，OOP）
##
##
- 模块化设计：把可以独立实现的功能分离成一个个模块。
  - 高内聚：将每个功能需要用到的代码都封装到模块中，使模块内部尽量不依赖外部。
  - 低耦合）：让模块与外部的各种联系尽可能地少。
- 单一职责原则    ：每个模块只做它应该做的事，少管闲事，且能独立地把自己的事做好。
- 开闭原则        ：每个模块对扩展开放、对修改关闭。
- 依赖抽象原则    ：每个模块依赖于外部的抽象接口，而不是具体细节。
- 组合优于继承    ：如果两个类之间是is a的关系，应该用继承进行管理，否则使用组合更好。
  - 组合和继承都能实现对象的多态性、提高代码的复用性，但组合能避免类之间的耦合。
  - 继承会加深父类与子类的耦合，破坏子类和父类的封装（导致它们的成员混合在一起）。
## 测试驱动的开发：先规划开发需求、编写测试用例，再开始开发代码。
##
- 发布/订阅（publish/subscribe）模式：消息的发布者（Publisher）会把消息发送到代理（Broker），由代理接受订阅者（Subscriber）的订阅请求并发布消息。
  - Publisher可以同时是Subscriber。
  - 代理可以是一台设备或一个应用程序。
  - 从客户端/服务器模式来看，Publisher和Subscriber都是客户端（Client），Broker则是服务器（Server）。
- 观察者模式与发布/订阅模式很像，但是被观察对象会直接将消息推送给各个观察者，不存在代理。
##
##
## MVC模式：
Model（模型）：负责读写数据库
View（视图）：负责从Model读取数据，显示给用户
Controller（控制器）：从View读取用户的输入信息，向Model发送数据。

软件架构没有银弹，往往是取舍。


##
##
##
:::
